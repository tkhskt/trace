/* 0 */

/* eslint no-unused-vars: "off" */

/* eslint-disable no-param-reassign */

/* jshint validthis:true */

/*#__PURE__*/

/**
 * Dom7 2.1.5
 * Minimalistic JavaScript library for DOM manipulation, with a jQuery-compatible API
 * http://framework7.io/docs/dom.html
 *
 * Copyright 2020, Vladimir Kharlampidi
 * The iDangero.us
 * http://www.idangero.us/
 *
 * Licensed under MIT
 *
 * Released on: May 15, 2020
 */

/**
 * SSR Window 2.0.0
 * Better handling for window object in SSR environment
 * https://github.com/nolimits4web/ssr-window
 *
 * Copyright 2020, Vladimir Kharlampidi
 *
 * Licensed under MIT
 *
 * Released on: May 12, 2020
 */

/**
 * Swiper 5.4.1
 * Most modern mobile touch slider and framework with hardware accelerated transitions
 * http://swiperjs.com
 *
 * Copyright 2014-2020 Vladimir Kharlampidi
 *
 * Released under the MIT License
 *
 * Released on: May 20, 2020
 */

/************************************************************************/

/******/

/***/

//

//     Animate the slider.

//     Go to next slide and

//     emit a scroll event.

//    at least P (P=1?) larger than the most recent event's delta?

//   Don't go any further (avoid insignificant scroll movement).

//   Go to prev slide and

//   If direction has changed or

//   If the slider hasn't hit the latest slide or

//   Return now so you don't hit the preventDefault.

//   emit a scroll event.

//   if the scroll is quicker than the previous one:

//   if the slider is a loop and

//   if the slider isn't moving right now:

// '.swipe-handler',

// 'bullets' or 'progressbar' or 'fraction' or 'custom'

// 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'

// 1. do all N events have decreasing or same (absolute value) delta?

// 2. did all N events arrive in the last M (M=500?) msecs?

// 3. does the earliest event have an (absolute value) delta that's

// 4. does the latest event have a delta that's smaller than Q (Q=6?) pixels?

// Activate thumbs

// Active classes

// Add Classes

// Add event listeners

// Allow percentage to make a relative stretch for responsive sliders

// Also, because there's some remaining momentum we'll bias the snap in the

// Android

// Array of elements or instance of Dom

// Attach events

// Attach/Detach Events

// Autoheight

// Breakpoints

// CONCATENATED MODULE: ./node_modules/dom7/dist/dom7.modular.js

// CONCATENATED MODULE: ./node_modules/ssr-window/dist/ssr-window.esm.js

// CONCATENATED MODULE: ./node_modules/swiper/js/swiper.esm.bundle.js

// CONCATENATED MODULE: ./src/assets/js/index.js

// Calc Scale From Multi-touches

// Callback

// Callbacks

// Check if module is in cache

// Check that swiper should be inside of visible area of window

// Children needs to return slot items

// Class

// Classes

// Classes and attributes

// Cleanup styles

// Clicks

// Create a new module (and put it into the cache)

// Create array-like object

// Create loop

// Cursor

// Define if we need image drag

// Desktop

// Destroy loop

// Detach emitter events

// Detach events

// Directions locks

// Disable locks on resize

// Disable swiper and hide navigation when container not overflow

// Dom manipulation

// Don't bother continuing without a callback

// Duplicate to all looped slides

// ESM COMPAT FLAG

// Each slide offset from center

// Effects

// Else (the user is scrolling towards the beginning) and

// Else (this is the first time the wheel is moved):

// Emit

// Emit event

// Emit orientationchange

// Emit resize

// End the loop early

// Events

// Execute the module function

// Extend Swiper

// Extend defaults with modules params

// Extend defaults with passed params

// Extend instance methods and props

// Extend params

// Fall-back if spin cannot be determined

// Find actual thumbs index to slide to

// Find current slide

// Find current slide size

// Find el

// Find new height from highest slide in view

// Find slides currently in view

// Fix For Negative Oversliding

// Fix For Positive Oversliding

// Fix duration

// Fix for ultra small values

// Flag the module as loaded

// For faster swipes, also apply limits (albeit higher ones).

// Form elements to match

// Free mode

// Freemode or scrollContainer:

// Get attr

// Get breakpoint for window width

// Get breakpoint for window width and update parameters

// Get real index

// Get the indexes of x1 and x3 (the array indexes before and after given x2):

// Get value

// Grab Cursor

// If 1-4 are "yes" then we're near the end of a momuntum scroll deceleration.

// If 1-4 aren't satisfied, then wait to snap until 500ms after the last event.

// If freeModeSticky is active and the user ends a swipe with a slow-velocity

// If it's time to release the scroll:

// If the callback returns false

// If the movement is NOT big enough and

// If there is at least one previous recorded event:

// If user is scrolling towards the end:

// If we recently snapped after a momentum scroll, then ignore wheel events

// If you got here is because an animation has been triggered so store the current time

// Images

// Increasing or reverse-sign delta means the user started scrolling again. Clear the wheel event log.

// Indexes

// Init

// Init Flag

// Install Modules

// It's easy to see this when simulating touch with mouse events. To fix this,

// Iterate over the collection passing elements to `callback`

// Iterate over the current collection

// Keep the most recent events

// Last click time

// Latest Chrome and webkits Fix

// Legacy

// Live events

// Load entry module and return exports

// Locks

// Long touches

// Module create callback

// Move image

// NEW

// NS

// Navigation

// Next Slide

// Next Slides

// No support

// Node/element

// Normalize slideIndex

// Object

// Object.prototype.hasOwnProperty.call

// Observe container

// Observe wrapper

// Other selectors

// Pagination

// Passive Listeners

// Pixel Ratio

// Prev Slide

// Prev Slides

// Prevent Links Clicks

// Pro 12.9

// Progress

// Props

// Prototype

// RTL

// Reasonable defaults

// Register the new event in a variable which stores the relevant data

// Remove duplicated slides

// Remove last grid elements depending on width

// Render Container

// Render || Update Pagination bullets/items

// Resistance

// Resize handler

// Return Grab Cursor

// Return `this` to allow chained DOM operations

// Return app instance

// Return collection with methods

// Return locks after resize

// Return page scroll on edge positions

// Return the exports of the module

// Return true to animate scroll on edges

// Round length

// Save Dom lib

// Save locks

// Scale image

// See comment above for "remaining wheel events in this scroll" determination.

// Set Grab Cursor

// Set attrs

// Set breakpoint

// Set correct perspective for IE10

// Set shadows

// Set slides order

// Set value

// Set wrapper width

// Short swipes

// Slide To Initial Slide

// Slides

// Slides grid

// Snap immediately and ignore remaining wheel events in this scroll.

// Some old versions of Webkit choke when 'none' is passed; pass

// Stop autoplay

// String

// Subtract paddings

// Swiper Instance

// Swiping/no swiping

// Tap, doubleTap, Click

// The current translate is before the current snap index, so the choice

// The current translate is on or after the current snap index, so the choice

// The module cache

// The observerUpdate event should only be triggered

// The require function

// There would be no events with distance zero, so the last event is stale.

// This is the only way to test support for the `wheel` event in IE9+.

// Threshold

// Time diff

// To support iOS's swipe-to-go-back gesture (when being used in-app, with UIWebView).

// Toggle Zoom

// Touch Events

// Touches

// Transforms

// Types

// Unique Navigation Elements

// Update Height

// Update Index

// Update Navigation Buttons

// Update active index in free mode

// Update progress

// Update size

// Update slides

// Update translate

// Velocities

// Velocity

// Vertical

// Virtual Translate

// Visible Slides

// We're at the end of the deceleration of a momentum scroll, so there's no need

// Webview

// When wheel scrolling starts with sticky (aka snap) enabled, then detect

// Zoom In

// Zoom Out

// __webpack_public_path__

// an end-of-momentum snap).

// but it did not work out

// create a fake namespace object

// define __esModule on exports

// define getter function for harmony exports

// delta in LINE units

// delta in PAGE units

// direction of the ongoing scroll because it's better UX for the scroll to snap

// empty string instead in this case

// eslint-disable-line

// eslint-disable-next-line

// event, then durations can be 20+ seconds to slide one (or zero!) slides.

// events

// expose the module cache

// expose the modules object (__webpack_modules__)

// for 500ms.

// getDefaultExport function for compatibility with non-harmony modules

// i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid

// iOS

// iOS 8+ changed UA

// iPadOs 13 fix

// if (!$(this).hasClass(swiper.params.slideActiveClass)) return;

// if it's already scrolled more than 20% in the current direction, keep going.

// if the last time the user scrolled was too close to the current one (avoid continuously triggering the slider):

// if the slider hasn't hit the first slide or

// if the slider is a loop and

// if the slider isn't moving right now:

// if user scrolls with shift he wants horizontal scroll

// if we get here, then we haven't detected the end of a momentum scroll, so

// image already loaded...

// in px

// in the same direction as the scroll instead of reversing to snap.  Therefore,

// is between the current index and the one after it.

// is between the current index and the one before it.

// isDirection

// isMoved = true;

// it makes sense to create this only once and recall it for the interpolation

// jquery fix

// lifting finger or mouse vs. moving slowly before lifting the finger/mouse.

// limit single-slide swipes to the default slide duration. This also has the

// loop

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// nice side effect of matching slide speed if the user stopped moving before

// no getter for object

// once despite the number of mutations.  Additional

// or if it's a new scroll (larger delta or inverse sign as last event before

// pixelX, pixelY

// reset margins

// side scrolling on FF with DOMMouseScroll

// something got wrong

// the end of a momentum scroll by storing recent (N=15?) wheel events.

// the function does a lot of value caching for performance

// this implies that the user stopped moving a finger then released.

// this will create an Interpolate function based on the snapGrids

// to give time for the deceleration to finish. Stop ignoring after 500 msecs

// to wait for more events. Snap ASAP on the next tick.

// triggers are redundant and are very costly

// we'll consider a scroll "complete" when there haven't been any wheel events

// webpackBootstrap

// x is the Grid of the scrolled scroller and y will be the controlled scroller

// xxx: for now i will just save one spline function to to
